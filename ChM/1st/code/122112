#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
double EPS = 1e-9;
double SHIFT = 0.237;
int FLAG = 0;
int SIGN = 1;

double **MakeMatrix(int col, int rows)
{
    double **mtx = malloc(col * sizeof(*mtx));
    for (int i = 0; i < rows; ++i) {
        mtx[i] = calloc(rows, sizeof(**mtx));
    }
    return mtx;
}

double *solveEquationsSystem(double **mat, int n)
{
    double *cur = calloc(n, sizeof(*cur));
    double curSolution = 0;

    for (double w = SHIFT; w < 2; w += SHIFT) {
        double *prev = calloc(n, sizeof(*prev));
        for (int i = 0; i < n; ++i) {
            cur[i] = 0;
        }
        int count = 0;
        do {
            ++count;
            double *tmp = cur;
            cur = prev;
            prev = tmp;
            for (int i = 0; i < n; ++i) {
                cur[i] = mat[i][n] * w + mat[i][i] * prev[i] * (1.0 - w);
                for (int j = 0; j < i; ++j) {
                    cur[i] -= mat[i][j] * cur[j] * w;
                }
                for (int j = i + 1; j < n; ++j) {
                    cur[i] -= mat[i][j] * prev[j] * w;
                }
                cur[i] /= mat[i][i];
            }
            curSolution = 0;
            for (int i = 0; i < n; i++) {
                curSolution += fabs(cur[i] - prev[i]);
                prev[i] = cur[i];
            }
        } while (fabs(curSolution) > EPS);
        printf("$$w = %.3f ,\\; iterations = %d,\\;", w, count);
        printf("x = \\begin{pmatrix}");
        for (int i = 0; i < n; i++) {
            if (i > 0)
                printf("\\\\");
            printf("%.10f", cur[i]);
        }
        printf("\\end{pmatrix}$$\\\\\n");
        free(prev);
    }
    return cur;
}

void FreeMatrix(double **a, int n)
{
    for (int i = 0; i < n; ++i) {
        free(a[i]);
    }
    free(a);
}

void PrintMatrix(double **a, double *b, int cls, int rows)
{
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cls; ++j) {
            printf("%.2f ", a[i][j]);
        }
        if (b) printf("%.2f", b[i]);
        printf("\n");
    }
}

void SwapRows(double **a, int i, int j)
{
    if (i != j) SIGN *= -1;
    double *tmp = a[i];
    a[i] = a[j];
    a[j] = tmp;
}

int FIT(double **a, int n)
{
    for (int i = 1; i <= n; ++i) {
        if (!DiagonalForm(a, i, i))
            return 0;
    }
    return 1;
}
int DiagonalForm(double **a, int num_rows, int num_cl)
{
    SIGN = 1;
    double **tmp = MakeMatrix(num_cl, num_rows);
    for (int i = 0; i < num_rows; ++i) {
        for (int j = 0; j < num_cl; ++j) {
            tmp[i][j] = a[i][j];
        }
    }
    for (int row = 0; row < num_rows; ++row) {
        int max_row = row;
        for (int r = row + 1; r < num_rows; ++r) {
            if ((fabs(tmp[r][row])) > fabs(tmp[max_row][row])) {
                max_row = r;
            }
        }
        if (!tmp[max_row][row]) continue;
        SwapRows(tmp, row, max_row);
        for (int i = 0; i < num_rows; ++i) {
            if (i == row) continue;
            double del = tmp[i][row] / tmp[row][row];
            for (int j = row; j < num_cl; ++j) {
                tmp[i][j] -= del * tmp[row][j];
            }
        }
        if (tmp[row][row] < 0) SIGN *= -1;
    }
    FreeMatrix(tmp, num_cl);
    if (SIGN == 1) {
        return 1;
    } else {
        return 0;
    }
}

void SpecialMatrix(double **a, int n, int m)
{
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n + 1; ++j) {
            if (i == j) {
                a[i][j] = n + m * m + j / m + i / n;
            } else {
                a[i][j] = (double)(i + j) / (m + n);
            }
        }
        a[i][n] = m * i + n;
    }
}

int main() {
    if (!FLAG) {
        FILE *f = fopen("input.txt", "r");
        int n;
        fscanf(f, "%d", &n);
        double **mat = MakeMatrix(n, n + 1);

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n + 1; j++) {
                fscanf(f, "%lf", &mat[i][j]);
            }
        }
        if (FIT(mat, n)) {
            double *res = solveEquationsSystem(mat, n);
            //checkSolution(mat, res);
            free(res);
        } else {
            printf("Matrix doesn't fit");
        }
        FreeMatrix(mat, n);
        fclose(f);
    } else {
        int n = 30, m = 20;
        double **mat = MakeMatrix(n, n + 1);
        SpecialMatrix(mat, n, m);
        if (FIT(mat, n)) {
            double *res = solveEquationsSystem(mat, n);
            //Ñheck(mat, res, n);
            free(res);
        } else {
            printf("Matrix doesn't fit");
        }
        double *res = solveEquationsSystem(mat, n);
        //Ñheck(mat, res, n);
        for (int i = 0; i < n; ++i) {
            printf("%.10f\n", res[i]);
        }
        free(res);
    }
    return 0;
}
