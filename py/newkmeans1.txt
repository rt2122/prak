   "import numpy as np\n"
   "import matplotlib.pyplot as plt\n"
   "from sklearn.datasets import make_blobs\n"
   "from statistics import mean as meanlist\n"
   "\n"
   "def dist(x1, y1, x2, y2):\n"
   "    return np.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n"
   "\n"
   "def KMeans4(matr, k = 2, seed = 4, sample_size = 5, eps = 0.0001):\n"
   "    np.random.seed(seed)\n"
   "    x = np.asarray(matr[:, 0])\n"
   "    y = np.asarray(matr[:, 1])\n"
   "    #print(x)\n"
   "    #print(y)\n"
   "    length = len(x)\n"
   "    matr = np.concatenate([x, y, np.random.randint(0, k, length, dtype = int)])\n"
   "    matr = matr.reshape(3, length).T\n"
   "    \n"
   "    xc = np.random.randint(0, length, k)\n"
   "    yc = np.random.randint(0, length, k)\n"
   "    xc = x[xc]\n"
   "    yc = y[yc]\n"
   "    \n"
   "    if sample_size == 0:\n"
   "        sample_size = length\n"
   "    #print(sample_idx)\n"
   "    #print(sample_matr)\n"
   "    while True:\n"
   "        sample_idx = np.random.choice(length, sample_size, replace = False)\n"
   "        #print(sample_idx)\n"
   "        sample_matr = np.concatenate([x[sample_idx], y[sample_idx], np.random.randint(0, k, sample_size, dtype = int)])\n"
   "        sample_matr = sample_matr.reshape(3, sample_size).T\n"
   "        sample_matr[: k, 2] = np.arange(k)\n"
   "        #print(sample_matr)\n"
   "        for i in range(sample_size):\n"
   "            clast = k - 1\n"
   "            dist_to_clast = dist(sample_matr[i][0], sample_matr[i][1], xc[k - 1], yc[k - 1])\n"
   "            for j in range(k - 1):\n"
   "                cur_dist = dist(sample_matr[i][0], sample_matr[i][1], xc[j], yc[j])\n"
   "                if cur_dist < dist_to_clast:\n"
   "                    dist_to_clast = cur_dist\n"
   "                    clast = j\n"
   "            sample_matr[i][2] = clast\n"
   "        sums = 0\n"
   "        for i in range(k):\n"
   "            fil = list(filter(lambda q: sample_matr[q][2] == i, range(sample_size)))\n"
   "            if len(fil) == 0:\n"
   "                print(matr)\n"
   "            xcc = xc[i]\n"
   "            ycc = yc[i]\n"
   "            xc[i] = np.mean(x[fil])\n"
   "            yc[i] = np.mean(y[fil])\n"
   "            sums += np.abs(xc[i] - xcc) * np.abs(xc[i] - ycc)\n"
   "            #if np.isnan(xc[i]):\n"
   "                #print(matr)\n"
   "        print(\"#\")\n"
   "        print(xc)\n"
   "        print(yc)\n"
   "        if sums < eps:\n"
   "            break\n"
   "    \n"
   "    \n"
   "    #print(xc)\n"
   "    #print(yc)\n"
   "    for i in range(length):\n"
   "        clast = k - 1\n"
   "        dist_to_clast = dist(x[i], y[i], xc[k - 1], yc[k - 1])\n"
   "        for j in range(k - 1):\n"
   "            cur_dist = dist(x[i], y[i], xc[j], yc[j])\n"
   "            if cur_dist < dist_to_clast:\n"
   "                dist_to_clast = cur_dist\n"
   "                clast = j\n"
   "        matr[i][2] = clast\n"
   "    for i in range(k):\n"
   "        fil = list(filter(lambda q: matr[q][2] == i, range(length)))\n"
   "        xc[i] = np.mean(x[fil])\n"
   "        yc[i] = np.mean(y[fil])\n"
   "            \n"
   "    \n"
   "    plt.scatter(xc, yc, marker = \"v\", c = 'r')\n"
   "    return matr[:, 2]\n"
   "\n"
   "x, y = make_blobs(n_samples = 15, n_features = 2, centers = 50, random_state = 12)\n"
   "a = KMeans4(x, eps = 1)\n"
   "plt.scatter(x[:, 0], x[:, 1], c = a)\n"
   "plt.show()\n"
