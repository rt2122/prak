import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs

def uniform(ratio, k, eps = 1):
    a = int(np.sqrt(k))
    b = k // a + (k % a != 0)
    while abs(a / b - ratio) >= eps:
        if a == 1:
            break
        a -= 1
        b = k // a + (k % a != 0)
    return (a, b)

def dist(x1, y1, x2, y2):
    return np.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)

def sort_by_clust(x, k):
    ans = []
    length = x.shape[0]
    x0 = x[:, 0]
    y0 = x[:, 1]
    for i in range(k):
        fil = list(filter(lambda q: x[q][2] == i, range(length)))
        ans = np.concatenate([ans, x0[fil]])
    for i in range(k):
        fil = list(filter(lambda q: x[q][2] == i, range(length)))
        ans = np.concatenate([ans, y0[fil]])
    return ans.reshape(2, length).T

def KMeans4(matr, k = 2, seed = 4, eps = 0.0001, limit_of_rec = 500, show_work = False):
    np.random.seed(seed)
    x = np.asarray(matr[:, 0])
    y = np.asarray(matr[:, 1])
    
    length = len(x)
    matr = np.concatenate([x, y, np.random.randint(0, k, length, dtype = int)])
    matr = matr.reshape(3, length).T
    #### Initialization of the initial position of the cluster center
    x_len = x.max()-x.min()
    y_len = y.max()-y.min()
    uni_x, uni_y = uniform((x_len)/(y_len), k, eps = eps)
    units = np.random.choice(uni_x * uni_y, k, replace = False)
    xc = np.zeros(k)
    yc = np.zeros(k)
    for i in range(k):
        xc[i] = x.min() + x_len / (2 * uni_x) + (units[i] % uni_x) * x_len / uni_x
        yc[i] = y.min() + y_len / (2 * uni_y) + (units[i] % uni_y) * y_len / uni_y
    for i in range(uni_x + 1):
        xx = x.min() + i * x_len / uni_x
        plt.plot([xx, xx], [y.min(), y.max()])
    for i in range(uni_y + 1):
        yy = y.min() + i * y_len / uni_y
        plt.plot([x.min(), x.max()], [yy, yy])
    plt.scatter(xc, yc, marker = "*", c = "r")
    ####
    limit = limit_of_rec
    while True:
        limit -= 1
        if limit == 0:
            if show_work:
                print("Calculated with the achievement of the limit number of iterations: ", limit_of_rec)
            break
        for i in range(length):
            clast = k - 1
            dist_to_clast = dist(matr[i][0], matr[i][1], xc[k - 1], yc[k - 1])
            for j in range(k - 1):
                cur_dist = dist(matr[i][0], matr[i][1], xc[j], yc[j])
                if cur_dist < dist_to_clast:
                    dist_to_clast = cur_dist
                    clast = j
            matr[i][2] = clast
        sums = 0
        for i in range(k):
            fil = list(filter(lambda q: matr[q][2] == i, range(length)))
            if len(fil) == 0:
                sums = eps + 1
                r = np.random.randint(length)
                xc[i] = x[r]
                yc[i] = y[r]
            else:
                xcc = xc[i]
                ycc = yc[i]
                xc[i] = np.mean(x[fil])
                yc[i] = np.mean(y[fil])
                sums += dist(xc[i], yc[i], xcc, ycc)
        if sums < eps:
            if show_work:
                print("Calculated with given accuracy, number of iterations =", limit_of_rec - limit)
            break
    plt.scatter(xc, yc, marker = "v", c = "black")
    return (matr[:, 2], xc, yc)

def best_K (matr, k_max = 0):
    length = matr.shape[0]
    if k_max == 0:
        k_max = int(pow(length, 1/3)) + 1
    if k_max < 2:
        k_max = 3
    arr = np.array(range(k_max - 2)) + 2
    inter = np.zeros(k_max - 2)
    exter = np.zeros(k_max - 2)
    for e in range(k_max - 2):
        a, xc, yc = KMeans4(matr, arr[e])
        num = 0
        exter[k] = 0
        i = 0
        while i < arr[e]:
            j = i + 1
            while j < arr[e]:
                exter[e] += dist(xc[i], yc[i], xc[j], yc[j])
                num += 1
        exter[e] /= num
    
    plt.plot(arr, exter)
    

n = int(input("Input number of dots\n"))
x, y = make_blobs(n_samples = sam, n_features = 2, centers = np.random.randint(0, n // 2), random_state = 12)
a, b, c = KMeans(x, k = 4)
plt.scatter(x[:, 0], x[:, 1], c = a, alpha = 0.2)
plt.show()